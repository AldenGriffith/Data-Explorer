i <- sort(ip[,1])
i
i <- sort(ip[,1], index.return = TRUE)
i
str(i)
i <- sort(ip[,1])
str(i)
i <- sort.int(ip[,1])
i
i <- sort(ip[,1], index.return = TRUE)$ix
i <- sort(ip[,1], index.return = TRUE)$ix
i <- sort(ip[,1], index.return = TRUE)
str(i)
i <- order(ip[,1])
i
runApp('Shiny/Jackie/evolution-mechanisms/evolution-mechanisms')
x <- 1:9
y <- c(14,12,10,7,6,5,4,3,3)
x
y
plot(x,y)
plot(x, y, col = "magenta")
plot(x, y, col = "magenta", cex = 2)
plot(x, y, col = "magenta", cex = 2, pch = 7)
plot(x, y, col = "magenta", cex = 2, pch = 7,
xlab = "Distance from light source", ylab = "Number of rays")
?poly
plot(x, y, col = "magenta", cex = 2, pch = 7, type = "o",
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "lightblue", cex = 2, pch = 7, type = "o",
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "limegreen", cex = 2, pch = 7, type = "o",
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "tomato", cex = 2, pch = 7, type = "o",
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "tomato", cex = 2, pch = 7, type = "o", lwd = 2,
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "tomato", cex = 2, pch = 7, type = "o", lwd = 1,
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "tomato", cex = 2, pch = 7, type = "o", lwd = 10,
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "tomato", cex = 2, pch = 7, type = "o", lwd = 8,
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "violet", cex = 2, pch = 7, type = "o", lwd = 8,
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "lavender", cex = 2, pch = 7, type = "o", lwd = 8,
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "white", cex = 2, pch = 7, type = "o", lwd = 8,
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "purple, blue", cex = 2, pch = 7, type = "o", lwd = 8,
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = "purple", cex = 2, pch = 7, type = "o", lwd = 8,
xlab = "Distance from light source", ylab = "Number of rays")
x <- 1:9
y <- c(14,12,10,7,6,5,4,3,3)
col <- rgb(1, 0, 0)
plot(x, y, col = col, cex = 2, pch = 7, type = "o", lwd = 8,
xlab = "Distance from light source", ylab = "Number of rays")
col <- rgb(1, 0, 1/2)
plot(x, y, col = col, cex = 2, pch = 7, type = "o", lwd = 8,
xlab = "Distance from light source", ylab = "Number of rays")
plot(x, y, col = rgb(1, 0, 1/2), cex = 2, pch = 7, type = "o", lwd = 8,
xlab = "Distance from light source", ylab = "Number of rays", main = "The Light Experiment")
qplot(x,y)
group <- c(rep("A",5), rep("B",4))
x <- 1:9
y <- c(14,12,10,7,6,5,4,3,3)
qplot(x, y,  color = group)
terms(random)
random
length(attr(terms(random), "term.labels"))
Time = 100
N = 100
Lambda = 1.5
K = 5000
for (t in 1:Time){
N[t+1] = N[t] + N[t]*(Lambda-1)*(1-(N[t]/K))
}
# plot(0:Time, N, type="o", col=4,
#      xlab="Years", ylim=c(0,5e3))
points(0:Time, N, type="o", col=4)
Time = 100
N = 100
Lambda = 1.5
K = 5000
for (t in 1:Time){
N[t+1] = N[t] + N[t]*(Lambda-1)*(1-(N[t]/K))
}
plot(0:Time, N, type="o", col=4,
xlab="Years", ylim=c(0,5e3))
points(0:Time, N, type="o", col=4)
Time = 100
N = 100
Lambda = 1.1
K = 5000
for (t in 1:Time){
N[t+1] = N[t] + N[t]*(Lambda-1)*(1-(N[t]/K))
}
plot(0:Time, N, type="o", col=4,
xlab="Years", ylim=c(0,5e3))
points(0:Time, N, type="o", col=4)
Lams <- numeric(Time)
t
t([2])
?t
?T
Time = 100
N = 100
Lambda = 1.1
K = 5000
Lams <- numeric(Time)
for (t in 1:Time){
N[t+1] = N[t] + N[t]*(Lambda-1)*(1-(N[t]/K))
Lams[t] <- N[t+1] / N[t]
}
plot(0:Time, N, type="o", col=4,
xlab="Years", ylim=c(0,5e3))
points(0:Time, N, type="o", col=4)
Time = 100
N = 100
Lambda = 1.1
K = 5000
Lams <- numeric(Time)
for (t in 1:Time){
N[t+1] = N[t] + N[t]*(Lambda-1)*(1-(N[t]/K))
Lams[t] <- N[t+1] / N[t]
}
plot(0:Time, N, type="o", col=4,
xlab="Years", ylim=c(0,5e3))
# points(0:Time, N, type="o", col=4)
plot(1:Time, Lams, type="o", col=4,
xlab="Years", ylab = "Observed growth rate")
abline(h = c(Lambda, 1))
Time = 100
N = 100
Lambda = 1.1
K = 5000
Lams <- numeric(Time)
for (t in 1:Time){
N[t+1] = N[t] + N[t]*(Lambda-1)*(1-(N[t]/K))
Lams[t] <- N[t+1] / N[t]
}
plot(0:Time, N, type="o", col=4,
xlab="Years", ylim=c(0,5e3))
# points(0:Time, N, type="o", col=4)
plot(1:Time, Lams, type="o", col=4, yaxs = "i", ylim = range(c(1,Lambda)),
xlab="Years", ylab = "Observed growth rate")
plot(0:Time, N, type="o", col=4, yaxs = "i",
xlab="Years", ylim=c(0,5e3))
# points(0:Time, N, type="o", col=4)
plot(1:Time, Lams, type="o", col=4, yaxs = "i", ylim = range(c(1,Lambda)),
xlab="Years", ylab = "Observed growth rate")
plot(0:Time, N, type="o", col=4, yaxs = "i",
xlab="Years", ylim=c(0,5e3))
# points(0:Time, N, type="o", col=4)
plot(1:Time, Lams, type="o", col=2, yaxs = "i", ylim = range(c(1,Lambda)),
xlab="Years", ylab = "Observed growth rate")
327/750
1 - 327/750
1 - 288/750
288/750
184/750
1-184/750
1-725/750
725/750
exp(1.7)
exp(2.4)
exp(1)
exp(1.75)
?mean
>find
?find
?exp
a<-array(0,c(2,3))
is.numeric(a)
is.matrix(a)
is.vector(a)
is.array(a)
a<-c(1,2)
is.numeric(a)
is.vector(a)
a<-1
is.vector(a)
a<-v(1,2,5,35)
a<-c(1,2,5,35)
a<-t(c)
a<-t(a)
a
is.vector(a)
is.vector(matrix)
is.matrix(a)
is.character(a)
a<-4
is.array(a)
a<-c(1,2,5,35)
is.array(t(a))
is.array(a
)
X <- c(2,4,6)
Hello <- c("How","are","you?")
Hellow
Hello
data.frame(Hello,X)
shiny::runApp('Shiny/GitHub/Data-Explorer')
runApp('Shiny/GitHub/Data-Explorer')
runApp('Shiny/GitHub/Data-Explorer')
runApp('Shiny/GitHub/Data-Explorer')
runApp('Shiny/GitHub/Data-Explorer')
runApp('Shiny/GitHub/Data-Explorer')
runApp('Shiny/GitHub/Data-Explorer')
runApp('Shiny/GitHub/Data-Explorer')
setwd("~/Shiny/GitHub/Data-Explorer")
runApp()
runApp()
ui <- function(request) {
fluidPage(
sidebarPanel(
sliderInput("n", "Value to add", min = 0, max = 100, value = 50),
actionButton("add", "Add"), br(), br(),
bookmarkButton()
),
mainPanel(
h4("Sum of all previous slider values:", textOutput("sum"))
)
)
}
server <- function(input, output, session) {
vals <- reactiveValues(sum = 0)
# Save extra values in state$values when we bookmark
onBookmark(function(state) {
state$values$currentSum <- vals$sum
})
# Read values from state$values when we restore
onRestore(function(state) {
vals$sum <- state$values$currentSum
})
# Exclude the add button from bookmarking
setBookmarkExclude("add")
observeEvent(input$add, {
vals$sum <- vals$sum + input$n
})
output$sum <- renderText({
vals$sum
})
}
shinyApp(ui, server, enableBookmarking = "url")
ui <- function(request) {
fluidPage(
sidebarPanel(
sliderInput("n", "Value to add", min = 0, max = 100, value = 50),
actionButton("add", "Add"), br(), br(),
bookmarkButton()
),
mainPanel(
h4("Sum of all previous slider values:", textOutput("sum"))
)
)
}
server <- function(input, output, session) {
vals <- reactiveValues(sum = 0)
# Save extra values in state$values when we bookmark
onBookmark(function(state) {
state$values$currentSum <- vals
})
# Read values from state$values when we restore
onRestore(function(state) {
vals <- state$values$currentSum
})
# Exclude the add button from bookmarking
setBookmarkExclude("add")
observeEvent(input$add, {
vals$sum <- vals$sum + input$n
})
output$sum <- renderText({
vals$sum
})
}
shinyApp(ui, server, enableBookmarking = "url")
V
vals <- reactiveValues(sum = 0)
str(vals)
vals$sum <- 34
names(vals)
isolate(names(vals))
ui <- function(request) {
fluidPage(
sidebarPanel(
sliderInput("n", "Value to add", min = 0, max = 100, value = 50),
actionButton("add", "Add"), br(), br(),
bookmarkButton()
),
mainPanel(
h4("Sum of all previous slider values:", textOutput("sum"))
)
)
}
server <- function(input, output, session) {
vals <- reactiveValues(sum = 0)
# Save extra values in state$values when we bookmark
onBookmark(function(state) {
# In.V <- isolate(names(vals))
#
# for (i in 1:length(In.V)){
#
#
#     state$values$currentSum <- vals$sum
#
# }
state$values$sum <- vals$sum
})
# Read values from state$values when we restore
onRestore(function(state) {
vals$sum <- state$values$sum
})
# Exclude the add button from bookmarking
setBookmarkExclude("add")
observeEvent(input$add, {
vals$sum <- vals$sum + input$n
})
output$sum <- renderText({
vals$sum
})
}
shinyApp(ui, server, enableBookmarking = "url")
vals
isolate(names(vals))
vals[["sum"]]
isolate(vals[["sum"]])
ui <- function(request) {
fluidPage(
sidebarPanel(
sliderInput("n", "Value to add", min = 0, max = 100, value = 50),
actionButton("add", "Add"), br(), br(),
bookmarkButton()
),
mainPanel(
h4("Sum of all previous slider values:", textOutput("sum"))
)
)
}
server <- function(input, output, session) {
vals <- reactiveValues(sum = 0)
# Save extra values in state$values when we bookmark
onBookmark(function(state) {
In.V <- isolate(names(vals))
for (i in 1:length(In.V)){
state$values[[In.V[i]]] <- vals[[In.V[i]]]
}
# state$values$sum <- vals$sum
})
# Read values from state$values when we restore
onRestore(function(state) {
vals$sum <- state$values$sum
})
# Exclude the add button from bookmarking
setBookmarkExclude("add")
observeEvent(input$add, {
vals$sum <- vals$sum + input$n
})
output$sum <- renderText({
vals$sum
})
}
shinyApp(ui, server, enableBookmarking = "url")
ui <- function(request) {
fluidPage(
sidebarPanel(
sliderInput("n", "Value to add", min = 0, max = 100, value = 50),
actionButton("add", "Add"), br(), br(),
bookmarkButton()
),
mainPanel(
h4("Sum of all previous slider values:", textOutput("sum"))
)
)
}
server <- function(input, output, session) {
vals <- reactiveValues(sum = 0)
# Save extra values in state$values when we bookmark
onBookmark(function(state) {
In.V <- isolate(names(vals))
for (i in 1:length(In.V)){
state$values[[In.V[i]]] <- vals[[In.V[i]]]
}
# state$values$sum <- vals$sum
})
# Read values from state$values when we restore
onRestore(function(state) {
In.V <- isolate(names(state$values))
for (i in 1:length(In.V)){
vals[[In.V[i]]] <- state$values[[In.V[i]]]
}
# vals$sum <- state$values$sum
})
# Exclude the add button from bookmarking
setBookmarkExclude("add")
observeEvent(input$add, {
vals$sum <- vals$sum + input$n
})
output$sum <- renderText({
vals$sum
})
}
shinyApp(ui, server, enableBookmarking = "url")
ui <- function(request) {
fluidPage(
sidebarPanel(
sliderInput("n", "Value to add", min = 0, max = 100, value = 50),
actionButton("add", "Add"), br(), br(),
bookmarkButton()
),
mainPanel(
h4("Sum of all previous slider values:", textOutput("sum"))
)
)
}
server <- function(input, output, session) {
vals <- reactiveValues(sum = 0)
# Save extra values in state$values when we bookmark
onBookmark(function(state) {
In.V <- isolate(names(vals))
for (i in 1:length(In.V)){
state$values$V[[In.V[i]]] <- vals[[In.V[i]]]
}
# state$values$sum <- vals$sum
})
# Read values from state$values when we restore
onRestore(function(state) {
In.V <- isolate(names(state$values$V))
for (i in 1:length(In.V)){
vals[[In.V[i]]] <- state$values[[In.V[i]]]
}
# vals$sum <- state$values$sum
})
# Exclude the add button from bookmarking
setBookmarkExclude("add")
observeEvent(input$add, {
vals$sum <- vals$sum + input$n
})
output$sum <- renderText({
vals$sum
})
}
shinyApp(ui, server, enableBookmarking = "url")
runApp()
runApp()
?enableBookmarking
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Do.Custom, Save.Fig, file, Submit.Button
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?onBookmarked
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bookmarkButton
?actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
