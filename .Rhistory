round(coefficients(fit),5)
# abline(h = coefficients(fit)[1])
#
# X <- D$Time
# Y <- D$O3.molecules
d <- read.delim('clipboard')
X <- d$Time
Y <- d$A
# product
fit <- nlsLM(Y ~ a + b*(1-exp(-c*X)), data = D, start = list(a=1, b=1, c = 1))
# #reactant
# fit <- nlsLM(Y ~ b*(exp(-c*X)), data = D, start = list(b=1, c = 1))
plot(X,Y)
pred <- predict(fit, newdata = data.frame(X = 0:200))
lines(0:200,pred)
# summary(fit)
round(coefficients(fit),5)
# abline(h = coefficients(fit)[1])
#
# X <- D$Time
# Y <- D$O3.molecules
d <- read.delim('clipboard')
X <- d$Time
Y <- d$B
# product
fit <- nlsLM(Y ~ b*(1-exp(-c*X)), data = D, start = list(b=1, c = 1))
# #reactant
# fit <- nlsLM(Y ~ b*(exp(-c*X)), data = D, start = list(b=1, c = 1))
plot(X,Y)
pred <- predict(fit, newdata = data.frame(X = 0:200))
lines(0:200,pred)
# summary(fit)
round(coefficients(fit),5)
# abline(h = coefficients(fit)[1])
#
# X <- D$Time
# Y <- D$O3.molecules
d <- read.delim('clipboard')
X <- d$Time
Y <- d$A
# # product
# fit <- nlsLM(Y ~ b*(1-exp(-c*X)), data = D, start = list(b=1, c = 1))
#reactant
fit <- nlsLM(Y ~ b*(exp(-c*X)), data = D, start = list(b=1, c = 1))
plot(X,Y)
pred <- predict(fit, newdata = data.frame(X = 0:200))
lines(0:200,pred)
# summary(fit)
round(coefficients(fit),5)
# abline(h = coefficients(fit)[1])
#
# X <- D$Time
# Y <- D$O3.molecules
d <- read.delim('clipboard')
X <- d$Time
Y <- d$A
# # product
# fit <- nlsLM(Y ~ b*(1-exp(-c*X)), data = D, start = list(b=1, c = 1))
#reactant
fit <- nlsLM(Y ~ b*(exp(c*X)), data = D, start = list(b=1, c = 1))
plot(X,Y)
pred <- predict(fit, newdata = data.frame(X = 0:200))
lines(0:200,pred)
# summary(fit)
round(coefficients(fit),5)
# abline(h = coefficients(fit)[1])
#
# X <- D$Time
# Y <- D$O3.molecules
d <- read.delim('clipboard')
X <- d$Time
Y <- d$A
# # product
# fit <- nlsLM(Y ~ b*(1-exp(-c*X)), data = D, start = list(b=1, c = 1))
#reactant
fit <- nlsLM(Y ~ b*(exp(-c*X)), data = D, start = list(b=1, c = 1))
plot(X,Y)
pred <- predict(fit, newdata = data.frame(X = 0:200))
lines(0:200,pred)
# summary(fit)
round(coefficients(fit),5)
# abline(h = coefficients(fit)[1])
#
# X <- D$Time
# Y <- D$O3.molecules
d <- read.delim('clipboard')
X <- d$Time
Y <- d$A
# # product
# fit <- nlsLM(Y ~ b*(1-exp(-c*X)), data = D, start = list(b=1, c = 1))
#reactant
fit <- nlsLM(Y ~ b*(exp(c*X)), data = D, start = list(b=1, c = -1))
plot(X,Y)
pred <- predict(fit, newdata = data.frame(X = 0:200))
lines(0:200,pred)
# summary(fit)
round(coefficients(fit),5)
# abline(h = coefficients(fit)[1])
#
# X <- D$Time
# Y <- D$O3.molecules
d <- read.delim('clipboard')
X <- d$Time
Y <- d$A
# # product
# fit <- nlsLM(Y ~ b*(1-exp(-c*X)), data = D, start = list(b=1, c = 1))
#reactant
fit <- nlsLM(Y ~ b*(exp(-c*X)), data = D, start = list(b=1, c = 1))
plot(X,Y)
pred <- predict(fit, newdata = data.frame(X = 0:200))
lines(0:200,pred)
# summary(fit)
round(coefficients(fit),5)
# abline(h = coefficients(fit)[1])
d <- read.delim('clipboard')
#
# X <- D$Time
# Y <- D$O3.molecules
d <- read.delim('clipboard')
X <- d$Time
Y <- d$A
# # product
# fit <- nlsLM(Y ~ b*(1-exp(-c*X)), data = D, start = list(b=1, c = 1))
#reactant
fit <- nlsLM(Y ~ b*(exp(-c*X)), data = D, start = list(b=1, c = 1))
plot(X,Y)
pred <- predict(fit, newdata = data.frame(X = 0:200))
lines(0:200,pred)
# summary(fit)
round(coefficients(fit),5)
# abline(h = coefficients(fit)[1])
setwd("~/Manuscripts/Perturbation Review/Oikos FINAL revision/Proofs/Supplementary Files/OIK-04458 R code and data")
source('~/Manuscripts/Perturbation Review/Oikos FINAL revision/Proofs/Supplementary Files/OIK-04458 R code and data/MAIN CODE.R', echo=TRUE)
?rnorm
lam <- rlnorm(1000, -2, 1)
plot(density(lam))
plot(density(lam), log="x")
plot(density(lam), log="x", xlim=c(-6,2))
plot(density(log(lam)), xlim=c(-6,2))
plot(density(log(lam)), xlim=c(-6,2), xaxs="n")
plot(density(log(lam)), xlim=c(-6,2), xaxs=t="n")
plot(density(log(lam)), xlim=c(-6,2), xaxt="n")
plot(density(log(lam)), xlim=c(-6,2), xaxt="n")
axis(1, at=log(.001, .1, 1))
?axis
plot(density(log(lam)), xlim=c(-6,2), xaxt="n")
axis(1, at=log(c(.001, .1, 1)))
plot(density(log(lam)), xlim=c(-6,2), xaxt="n")
ticks <- c(.001, .1, 1)
axis(1, at=log(ticks), labels = ticks)
plot(density(log(lam)), xlim=c(-6,2), xaxt="n")
ticks <- c(.01, .1, 1)
axis(1, at=log(ticks), labels = ticks)
exp(-6)
exp(2)
plot(density(log(lam)), xlim=c(-6,2), xaxt="n")
ticks <- c(.005, .01, .05, .1, .5, 1, 5)
axis(1, at=log(ticks), labels = ticks)
plot(density(log(lam)), xlim=c(-6,2), xaxt="n")
ticks <- c(.005, .01, .05, .1, .5, 1, 5)
axis(1, at=log(ticks), labels = ticks, las=2)
plot(density(log(lam)), xlim=c(-6,2), xaxt="n")
ticks <- c(.005, .01, .02, .05, .1, .2, .5, 1, 2, 5)
axis(1, at=log(ticks), labels = ticks, las=2)
runApp('~/Shiny/Data Explorer/Dev/V2-00b')
runGitHub("Data-Explorer","AldenGriffith")
?nlsLM
setwd("~/Shiny/GitHub/Data-Explorer")
runApp()
runApp()
runApp()
runApp()
?checkboxInput
checkboxGroupInput()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
D
D <- read.delim('clipboard')
D
Custom.Formula <- "a + b*x"
Custom.Start <- "a = 0, b = 0"
form <- as.formula(paste("y~",Custom.Formula))
form
?grep
sub("x", "X", tolower(Custom.Formula))
Custom.Start <- "a = 0, b = 0"
Custom.Start
parse(eval(paste("list(", Custom.Start, ")")))
paste("list(", Custom.Start, ")")
eval(paste("list(", Custom.Start, ")"))
eval(parse(paste("list(", Custom.Start, ")")))
parse(eval(paste("list(", Custom.Start, ")")))
eval(parse(text = paste("list(", Custom.Start, ")")))
start
Custom.Formula <- "a + b*X"
Custom.Formula <- sub("x", "X", tolower(Custom.Formula))
Custom.Start <- "a = 0, b = 0"
form <- as.formula(paste("Y~",Custom.Formula))
params < - eval(parse(text = paste("list(", Custom.Start, ")")))
fit <- nlsLM(form, data = D, start = params)
params < - eval(parse(text = paste("list(", Custom.Start, ")")))
Custom.Start <- "a = 0, b = 0"
eval(parse(text = paste("list(", Custom.Start, ")")))
params <- eval(parse(text = paste("list(", Custom.Start, ")")))
Custom.Formula <- "a + b*X"
Custom.Formula <- sub("x", "X", tolower(Custom.Formula))
Custom.Start <- "a = 0, b = 0"
form <- as.formula(paste("Y~",Custom.Formula))
params <- eval(parse(text = paste("list(", Custom.Start, ")")))
fit <- nlsLM(form, data = D, start = params)
fit
form
D
D$X <- D$Time
D$Y <- D$A
Custom.Formula <- "a + b*X"
Custom.Formula <- sub("x", "X", tolower(Custom.Formula))
Custom.Start <- "a = 0, b = 0"
form <- as.formula(paste("Y~",Custom.Formula))
params <- eval(parse(text = paste("list(", Custom.Start, ")")))
fit <- nlsLM(form, data = D, start = params)
plot(D$X,D$Y)
D$X <- D$Time
D$Y <- D$A
Custom.Formula <- "a + b*X^2"
Custom.Formula <- sub("x", "X", tolower(Custom.Formula))
Custom.Start <- "a = 0, b = 0"
form <- as.formula(paste("Y~",Custom.Formula))
params <- eval(parse(text = paste("list(", Custom.Start, ")")))
fit <- nlsLM(form, data = D, start = params)
plot(D$X,D$Y)
x <- seq(0,1,length.out=100)
pred <- predict(fit, newdata = data.frame(X = x))
lines(x,pred)
D$X <- D$Time
D$Y <- D$A
Custom.Formula <- "a + b*X"
Custom.Formula <- sub("x", "X", tolower(Custom.Formula))
Custom.Start <- "a = 0, b = 0"
form <- as.formula(paste("Y~",Custom.Formula))
params <- eval(parse(text = paste("list(", Custom.Start, ")")))
fit <- nlsLM(form, data = D, start = params)
plot(D$X,D$Y)
x <- seq(0,1,length.out=100)
pred <- predict(fit, newdata = data.frame(X = x))
lines(x,pred)
D$X <- D$Time
D$Y <- D$A
Custom.Formula <- "a + b*X + c*X^2"
Custom.Formula <- sub("x", "X", tolower(Custom.Formula))
Custom.Start <- "a = 0, b = 0, c = 0"
form <- as.formula(paste("Y~",Custom.Formula))
params <- eval(parse(text = paste("list(", Custom.Start, ")")))
fit <- nlsLM(form, data = D, start = params)
plot(D$X,D$Y)
x <- seq(0,1,length.out=100)
pred <- predict(fit, newdata = data.frame(X = x))
lines(x,pred)
Custom.Formula
?subtreeplot
?sub
D$X <- D$Time
D$Y <- D$A
Custom.Formula <- "a + b*X + c*X^2"
Custom.Formula <- gsub("x", "X", tolower(Custom.Formula))
Custom.Start <- "a = 0, b = 0, c = 0"
form <- as.formula(paste("Y~",Custom.Formula))
params <- eval(parse(text = paste("list(", Custom.Start, ")")))
fit <- nlsLM(form, data = D, start = params)
plot(D$X,D$Y)
x <- seq(0,1,length.out=100)
pred <- predict(fit, newdata = data.frame(X = x))
lines(x,pred)
coefficients(fit)
names(coefficients(fit))
params
runApp()
runApp()
runApp()
?nlsLM
runApp()
runApp()
runApp()
form <- "a + b*x"
form
form <- gsub("x", "X", form)
form
as.formula(paste("Y~",form))
runApp()
runApp()
form
str(form)
str(paste("Y ~ ", form, sep = ""))
as.formula(paste("Y ~ ", form, sep = ""))
?form
runApp()
?as.formula
form
formula(paste("Y ~ ", form, sep = ""))
runApp()
runApp()
runApp()
?paste
as.formula
?as.formula
?nlsLM
runApp()
?textInput
runApp()
input <- list(Custom.Start = "a = 0, b = 0")
input
eval(parse(text = paste("list(", input$Custom.Start, ")"))) #make starting values list
runApp()
runApp()
as.formula("a + f")
as.formula("~a + f")
as.formula("Y~a + f")
as.formula("~Ya + f")
runApp()
form
paste("Y", form, sep = " ~ ")
str(paste("Y", form, sep = " ~ "))
as.formula(paste("Y", form, sep = " ~ "))
runApp()
message(as.formula("Y ~ a + b*X"))
as.formula("Y ~ a + b*X")
str(as.formula("Y ~ a + b*X"))
message(str(as.formula("Y ~ a + b*X")))
runApp()
str(params)
runApp()
D
fig <- ggplot(D, aes(x = X, y = Power)) +
geom_point(aes(color = Group)) +
# geom_smooth(aes(color = Class), method = 'lm', formula = y ~ x, se = FALSE)
# geom_smooth(method = 'lm', formula = y ~ x + I(x^2), se = FALSE) +
# geom_smooth(method = 'lm', formula = log(y) ~ log(x), se = FALSE)
# geom_smooth(method = 'nls', formula = Y ~ a*X^b, start = list(a = 1,b=1), se = FALSE)
#
geom_smooth(method = 'nlsLM', formula = y~a+b*c, se=FALSE, method.args = list(start = list(a = 1, b=1), control = list(maxiter = 50000))) +
# geom_text(label = nls_eqn(D$X,D$Power), parse = TRUE)
# nls(Y~a*X^b, start=list(a=1,b=1), control = list(maxiter = 5000))
fig
form <- as.formula("Y ~ a + b*X")
params
params <- list(a = 1, b=1)
fig <- ggplot(D, aes(x = X, y = Power)) +
geom_point(aes(color = Group)) +
# geom_smooth(aes(color = Class), method = 'lm', formula = y ~ x, se = FALSE)
# geom_smooth(method = 'lm', formula = y ~ x + I(x^2), se = FALSE) +
# geom_smooth(method = 'lm', formula = log(y) ~ log(x), se = FALSE)
# geom_smooth(method = 'nls', formula = Y ~ a*X^b, start = list(a = 1,b=1), se = FALSE)
geom_smooth(method = 'nlsLM', formula = form, se=FALSE, method.args = list(start = params))
fig
form <- as.formula("Y ~ a + b*X")
params <- list(a = 1, b=1)
fig <- ggplot(D, aes(x = X, y = Power)) +
geom_point() +
# geom_smooth(aes(color = Class), method = 'lm', formula = y ~ x, se = FALSE)
# geom_smooth(method = 'lm', formula = y ~ x + I(x^2), se = FALSE) +
# geom_smooth(method = 'lm', formula = log(y) ~ log(x), se = FALSE)
# geom_smooth(method = 'nls', formula = Y ~ a*X^b, start = list(a = 1,b=1), se = FALSE)
geom_smooth(method = 'nlsLM', formula = form, se=FALSE, method.args = list(start = params))
# geom_text(label = nls_eqn(D$X,D$Power), parse = TRUE)
# nls(Y~a*X^b, start=list(a=1,b=1), control = list(maxiter = 5000))
fig
D
form <- as.formula("Y ~ a + b*X")
params <- list(a = 1, b=1)
fig <- ggplot(D, aes(x = X, y = Y)) +
geom_point() +
# geom_smooth(aes(color = Class), method = 'lm', formula = y ~ x, se = FALSE)
# geom_smooth(method = 'lm', formula = y ~ x + I(x^2), se = FALSE) +
# geom_smooth(method = 'lm', formula = log(y) ~ log(x), se = FALSE)
# geom_smooth(method = 'nls', formula = Y ~ a*X^b, start = list(a = 1,b=1), se = FALSE)
geom_smooth(method = 'nlsLM', formula = form, se=FALSE, method.args = list(start = params))
# geom_text(label = nls_eqn(D$X,D$Power), parse = TRUE)
# nls(Y~a*X^b, start=list(a=1,b=1), control = list(maxiter = 5000))
fig
form <- as.formula("y ~ a + b*x")
params <- list(a = 1, b=1)
fig <- ggplot(D, aes(x = X, y = Y)) +
geom_point() +
# geom_smooth(aes(color = Class), method = 'lm', formula = y ~ x, se = FALSE)
# geom_smooth(method = 'lm', formula = y ~ x + I(x^2), se = FALSE) +
# geom_smooth(method = 'lm', formula = log(y) ~ log(x), se = FALSE)
# geom_smooth(method = 'nls', formula = Y ~ a*X^b, start = list(a = 1,b=1), se = FALSE)
geom_smooth(method = 'nlsLM', formula = form, se=FALSE, method.args = list(start = params))
# geom_text(label = nls_eqn(D$X,D$Power), parse = TRUE)
# nls(Y~a*X^b, start=list(a=1,b=1), control = list(maxiter = 5000))
fig
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- list()
str(a)
length(a)
runApp()
runApp()
a <- NULL
a
a <- list()
a[[1]] <- NULL
a
length(a[[1]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runGitHub("Data-Explore","AldenGriffith")
runGitHub("Data-Explorer","AldenGriffith")
D
D$F <- c("A","B")
D
D$F <- c("A","B")
D$F <- letters(1:11)
?letters
D$F <- letters[1:11]
D
sapply(New.Data, is.factor)
sapply(D, is.factor)
sapply(D, is.character)
sapply(D, is.character | is.factor)
sapply(D, is.character || is.factor)
sapply(D, is.character)
sapply(D, is.character) || sapply(D, is.factor)
sapply(D, is.character) | sapply(D, is.factor)
D$X <- factor(D$X)
sapply(D, is.character) | sapply(D, is.factor)
sapply(D, is.character) | sapply(D, is.factor)
vars.cat <- sapply(D, is.character) | sapply(D, is.factor)
D[,vars.cat]
sapply(D[,vars.cat], factor)
D[,vars.cat] <- sapply(D[,vars.cat], factor)
str(D,2)
is.factor(D$X)
is.factor(D$F)
vars.cat
sum(vars.cat)
D[,vars.cat]
D[,vars.cat][2]
D[,vars.cat][1]
which(vars.cat)
D$F <- factor(D$F)
is.factor(D$F)
is.factor(D$X)
D$X <- factor(D$X)
is.factor(D$X)
runApp()
runApp()
runApp()
runApp()
D
is.factor(D)
sapply(D, is.factor)
runApp()
New.Data[,j] <- factor(New.Data[,j])
runApp()
print
runApp()
V$Choices[[i]]$Y_dy <- c("(none)", names(New.Data[vars.num]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
